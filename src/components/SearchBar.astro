---
---

<div class="search-container relative" x-data="{ isOpen: false, searchQuery: '', searchResults: [] }">
    <div class="relative">
        <input
            type="text"
            placeholder="Buscar en todo el sitio..."
            class="w-full px-4 py-2 pl-10 pr-4 text-gray-700 bg-white border border-gray-300 rounded-lg focus:outline-none focus:border-primary-500"
            x-model="searchQuery"
            @input="search"
            @focus="isOpen = true"
            @click.away="isOpen = false"
        />
        <svg
            class="absolute left-3 top-2.5 h-5 w-5 text-gray-400"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            />
        </svg>
    </div>

    <!-- Resultados de búsqueda -->
    <div
        x-show="isOpen && searchQuery.length > 2"
        x-transition:enter="transition ease-out duration-200"
        x-transition:enter-start="opacity-0 transform scale-95"
        x-transition:enter-end="opacity-100 transform scale-100"
        x-transition:leave="transition ease-in duration-100"
        x-transition:leave-start="opacity-100 transform scale-100"
        x-transition:leave-end="opacity-0 transform scale-95"
        class="absolute z-50 w-full mt-2 bg-white rounded-lg shadow-lg"
    >
        <div class="p-4">
            <template x-if="searchResults.length === 0 && searchQuery.length > 2">
                <p class="text-gray-500">No se encontraron resultados para tu búsqueda.</p>
            </template>

            <template x-if="searchResults.length > 0">
                <div class="space-y-4">
                    <template x-for="result in searchResults" :key="result.url">
                        <a
                            :href="result.url"
                            class="block p-4 hover:bg-gray-50 rounded-lg transition-colors"
                        >
                            <div class="flex items-center">
                                <div class="flex-shrink-0 w-12 h-12 mr-4">
                                    <img
                                        :src="result.image"
                                        :alt="result.title"
                                        class="w-full h-full object-cover rounded"
                                    />
                                </div>
                                <div>
                                    <h4
                                        class="text-lg font-semibold text-gray-900 mb-1"
                                        x-text="result.title"
                                    ></h4>
                                    <p
                                        class="text-sm text-gray-600"
                                        x-text="result.excerpt"
                                    ></p>
                                    <div
                                        class="text-xs text-primary-600 mt-1"
                                        x-text="result.type"
                                    ></div>
                                </div>
                            </div>
                        </a>
                    </template>
                </div>
            </template>
        </div>
    </div>
</div>

<script>
import { getAllPosts } from '../data/blog-posts';
import { getAllServicios } from '../data/servicios';
import { getAllCasos } from '../data/casos';

// Función para normalizar texto (eliminar acentos y convertir a minúsculas)
function normalizeText(text) {
    return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
}

// Función para verificar si un texto contiene una búsqueda
function containsSearch(text, search) {
    return normalizeText(text).includes(normalizeText(search));
}

// Función principal de búsqueda
function search() {
    const query = this.searchQuery.trim();
    
    if (query.length <= 2) {
        this.searchResults = [];
        return;
    }

    // Obtener todos los datos
    const posts = getAllPosts().map(post => ({
        ...post,
        type: 'Blog',
        url: `/blog/${post.slug}`
    }));

    const servicios = getAllServicios().map(servicio => ({
        ...servicio,
        type: 'Servicio',
        url: `/servicios/${servicio.slug}`,
        title: servicio.titulo,
        excerpt: servicio.descripcionCorta
    }));

    const casos = getAllCasos().map(caso => ({
        ...caso,
        type: 'Caso de Éxito',
        url: `/casos/${caso.slug}`,
        title: caso.titulo,
        excerpt: caso.descripcionCorta
    }));

    // Combinar y filtrar resultados
    const allResults = [...posts, ...servicios, ...casos].filter(item => 
        containsSearch(item.title, query) ||
        containsSearch(item.excerpt, query)
    );

    // Ordenar por relevancia (primero los que coinciden en el título)
    this.searchResults = allResults
        .sort((a, b) => {
            const aTitle = containsSearch(a.title, query);
            const bTitle = containsSearch(b.title, query);
            if (aTitle && !bTitle) return -1;
            if (!aTitle && bTitle) return 1;
            return 0;
        })
        .slice(0, 5); // Limitar a 5 resultados
}

// Exponer la función de búsqueda al componente
document.addEventListener('alpine:init', () => {
    Alpine.data('search', () => ({
        searchQuery: '',
        searchResults: [],
        search
    }));
});
</script>
