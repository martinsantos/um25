---
import type { Comment } from '../data/comments';
import { getCommentsByPostSlug } from '../data/comments';

interface Props {
    postSlug: string;
}

const { postSlug } = Astro.props;
const comments = await getCommentsByPostSlug(postSlug);

function formatDate(date: string): string {
    return new Date(date).toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}
---

<div class="comments-section mt-8" x-data="comments">
    <h3 class="text-2xl font-bold mb-6">Comentarios</h3>

    <!-- Formulario de Comentarios -->
    <form
        @submit.prevent="submitComment"
        class="bg-white rounded-lg shadow-md p-6 mb-8"
    >
        <div class="mb-4">
            <label for="author" class="block text-gray-700 font-medium mb-2">Nombre</label>
            <input
                type="text"
                id="author"
                x-model="formData.author"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                required
            />
        </div>

        <div class="mb-4">
            <label for="email" class="block text-gray-700 font-medium mb-2">Email</label>
            <input
                type="email"
                id="email"
                x-model="formData.email"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                required
            />
        </div>

        <div class="mb-4">
            <label for="content" class="block text-gray-700 font-medium mb-2">Comentario</label>
            <textarea
                id="content"
                x-model="formData.content"
                rows="4"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                required
            ></textarea>
        </div>

        <button
            type="submit"
            class="bg-primary-600 text-white px-6 py-2 rounded-lg hover:bg-primary-700 transition-colors"
            :disabled="isSubmitting"
        >
            <span x-show="!isSubmitting">Enviar Comentario</span>
            <span x-show="isSubmitting">Enviando...</span>
        </button>

        <!-- Mensaje de éxito/error -->
        <div
            x-show="message.text"
            :class="{'bg-green-100 text-green-700': message.type === 'success', 'bg-red-100 text-red-700': message.type === 'error'}"
            class="mt-4 p-4 rounded-lg"
            x-text="message.text"
        ></div>
    </form>

    <!-- Lista de Comentarios -->
    <div class="space-y-6">
        {comments.map((comment: Comment) => (
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center mb-4">
                    <div class="bg-primary-100 rounded-full w-10 h-10 flex items-center justify-center text-primary-700 font-bold">
                        {comment.author[0].toUpperCase()}
                    </div>
                    <div class="ml-4">
                        <h4 class="font-semibold">{comment.author}</h4>
                        <p class="text-sm text-gray-600">{formatDate(comment.createdAt)}</p>
                    </div>
                </div>
                <p class="text-gray-700 mb-4">{comment.content}</p>

                <!-- Respuestas -->
                {comment.replies && comment.replies.length > 0 && (
                    <div class="ml-8 mt-4 space-y-4">
                        {comment.replies.map(reply => (
                            <div class="bg-gray-50 rounded-lg p-4">
                                <div class="flex items-center mb-2">
                                    <div class="bg-primary-100 rounded-full w-8 h-8 flex items-center justify-center text-primary-700 font-bold text-sm">
                                        {reply.author[0].toUpperCase()}
                                    </div>
                                    <div class="ml-3">
                                        <h5 class="font-semibold">{reply.author}</h5>
                                        <p class="text-xs text-gray-600">{formatDate(reply.createdAt)}</p>
                                    </div>
                                </div>
                                <p class="text-gray-700">{reply.content}</p>
                            </div>
                        ))}
                    </div>
                )}

                <!-- Botón de Responder -->
                <button
                    @click="showReplyForm(comment.id)"
                    class="text-primary-600 hover:text-primary-700 text-sm font-medium mt-2"
                >
                    Responder
                </button>

                <!-- Formulario de Respuesta -->
                <div x-show="replyToId === comment.id" class="mt-4">
                    <form @submit.prevent="submitReply(comment.id)" class="space-y-4">
                        <div>
                            <label class="block text-gray-700 font-medium mb-2">Nombre</label>
                            <input
                                type="text"
                                x-model="replyData.author"
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                required
                            />
                        </div>
                        <div>
                            <label class="block text-gray-700 font-medium mb-2">Email</label>
                            <input
                                type="email"
                                x-model="replyData.email"
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                required
                            />
                        </div>
                        <div>
                            <label class="block text-gray-700 font-medium mb-2">Respuesta</label>
                            <textarea
                                x-model="replyData.content"
                                rows="3"
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                required
                            ></textarea>
                        </div>
                        <div class="flex space-x-4">
                            <button
                                type="submit"
                                class="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition-colors"
                                :disabled="isSubmitting"
                            >
                                <span x-show="!isSubmitting">Enviar Respuesta</span>
                                <span x-show="isSubmitting">Enviando...</span>
                            </button>
                            <button
                                type="button"
                                @click="cancelReply"
                                class="text-gray-600 hover:text-gray-700"
                            >
                                Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        ))}
    </div>
</div>

<script>
document.addEventListener('alpine:init', () => {
    Alpine.data('comments', () => ({
        formData: {
            author: '',
            email: '',
            content: ''
        },
        replyData: {
            author: '',
            email: '',
            content: ''
        },
        replyToId: null,
        isSubmitting: false,
        message: {
            text: '',
            type: ''
        },

        async submitComment() {
            this.isSubmitting = true;
            this.message = { text: '', type: '' };

            try {
                const response = await fetch('/api/comments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ...this.formData,
                        postSlug: '{postSlug}'
                    })
                });

                if (!response.ok) throw new Error('Error al enviar el comentario');

                this.message = {
                    text: 'Comentario enviado correctamente. Será revisado antes de publicarse.',
                    type: 'success'
                };
                this.formData = { author: '', email: '', content: '' };
            } catch (error) {
                this.message = {
                    text: 'Error al enviar el comentario. Por favor, intenta nuevamente.',
                    type: 'error'
                };
            } finally {
                this.isSubmitting = false;
            }
        },

        showReplyForm(commentId) {
            this.replyToId = commentId;
        },

        cancelReply() {
            this.replyToId = null;
            this.replyData = { author: '', email: '', content: '' };
        },

        async submitReply(commentId) {
            this.isSubmitting = true;

            try {
                const response = await fetch(`/api/comments/${commentId}/reply`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ...this.replyData,
                        postSlug: '{postSlug}'
                    })
                });

                if (!response.ok) throw new Error('Error al enviar la respuesta');

                this.message = {
                    text: 'Respuesta enviada correctamente. Será revisada antes de publicarse.',
                    type: 'success'
                };
                this.replyData = { author: '', email: '', content: '' };
                this.replyToId = null;
            } catch (error) {
                this.message = {
                    text: 'Error al enviar la respuesta. Por favor, intenta nuevamente.',
                    type: 'error'
                };
            } finally {
                this.isSubmitting = false;
            }
        }
    }));
});
</script>
